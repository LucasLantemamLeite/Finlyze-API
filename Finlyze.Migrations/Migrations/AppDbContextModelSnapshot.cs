// <auto-generated />
using System;
using Finlyze.Migrations.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fynlyze.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Finlyze.Domain.Entity.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.HasKey("Id");

                    b.ToTable("UserAccount", (string)null);
                });

            modelBuilder.Entity("Finlyze.Domain.Entity.UserAccount", b =>
                {
                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Active", "Active", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("Value")
                                .HasColumnType("Bit")
                                .HasColumnName("Active");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.BirthDate", "BirthDate", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("SmallDateTime")
                                .HasColumnName("BirthDate");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.CreateAt", "CreateAt", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("Value")
                                .ValueGeneratedOnUpdateSometimes()
                                .HasColumnType("SmallDateTime")
                                .HasColumnName("BirthDate");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(254)")
                                .HasColumnName("Email");

                            b1.HasKey("UserAccountId");

                            b1.HasIndex(new[] { "Value" }, "Unique_Key_Email_UserAccount")
                                .IsUnique();

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Login", "Login", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(30)")
                                .HasColumnName("Login");

                            b1.HasKey("UserAccountId");

                            b1.HasIndex(new[] { "Value" }, "Unique_Key_Login_UserAccount")
                                .IsUnique();

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(100)")
                                .HasColumnName("Name");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Password", "PasswordHash", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(30)")
                                .HasColumnName("PasswordHash");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("Nvarchar(20)")
                                .HasColumnName("PhoneNumber");

                            b1.HasKey("UserAccountId");

                            b1.HasIndex(new[] { "Value" }, "Unique_PhoneNumber_Login_UserAccount")
                                .IsUnique();

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.OwnsOne("Finlyze.Domain.ValueObject.UserAccountObject.Role", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Role");

                            b1.HasKey("UserAccountId");

                            b1.ToTable("UserAccount");

                            b1.WithOwner()
                                .HasForeignKey("UserAccountId");
                        });

                    b.Navigation("Active")
                        .IsRequired();

                    b.Navigation("BirthDate")
                        .IsRequired();

                    b.Navigation("CreateAt")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Login")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("PasswordHash")
                        .IsRequired();

                    b.Navigation("PhoneNumber")
                        .IsRequired();

                    b.Navigation("Role")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
